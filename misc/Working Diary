Sun 31 Jan 2016

The project started now almost 4 month ago and I had really some trouble
to keep it on track.
My main difficulty has and still is to some degree SQL and the orm.
It could have been misconception or pure misunderstanding I don't know exactly.
Nevertheless I am now almost at my interim goal to get a solid and functioning
model.
I could have made it easy like I did before, but this time I didn't for I wanted
to tackle my real weakness of having trouble to organise a bigger project.
I have been stuggling with his all my life but this time I decided to go for it.
I solved so many serious problems of my life until now it is time to get rid of
this problem as well. I can't tell if I am really slow or normal but I am doing
some progress so it's fine.

Starting this diary is part of the progress I do.

Task:
Build a catalog application with flask and sqlalchemy and add javascript user
authentification.

There is a blueprint in form of a restaurant catalog.

I decided to do an language and audio text catalog instead of restaurants
and menus.

But this introduced a many to many relationship and the trouble began.

At the moment I think I have a working model. But to be sure everything shall be
under tests. I already wrote tests only to find out my model wasn't right.

Writing tests is not a silver bullet. It helps a lot but doesn't releave you of
having the right logic underneath.

Now I think I have the right logic and the right data model. Now everything
shall be tested.

I wrote a data generator to have data to work with an test things. That was a
really good idea but it was time costly. I hope the time I invested pays out.

Today I started to work on the final creation function. I shall take the number
of languages one wants, the number of users and the number of sentences per
user.

It shall return an object that can then be inserted into the database.

I overwrote the orm classes with classes that replaced any fields that have
foreign key relationships and replaces these with the actual objects.

Now I want to create testing data, insert them into the database and have the
whole process under test.

I am aiming to manage this by the end of the next week.

Mo. 1. Feb. 2016
Planing to do some minor step. Get the data generator ready and an overview
of the testing.

I ran into a problem when testing the create language routine. The inheritage
doesn't initialise my parameter. I found out that this is due to the
decorator. Have to figure out a way to get around this.

Mo. 8. Feb. 2016
A busy week, which didn't see much programming. Maybe because I found out why
I had an error in the inheritage. Nevertheless the work continues. Now the
basics should work and I am going to commit. Next is to write a generator
function to save the generated data to disk. Finally put everything under test.

Sat. 13th of February 2016
Finally got the data generator working. It was a busy week, with lots of new
stuff to learn at NetApp, so I didn't manage to make any progress over
the week. Tomorrow, I hope to get the data written to disk, and read in
again, if existent. Then everything has to get set under test so I can finally
start the application. SQL was a real obstacle, but I think I finally managed
to get over it.

Sun. 14th of February 2016
Today saving the generated data is planed. I would like to have generated data
to be saved as csv data to disk, so they can be read in again and reused.
So there is a gendata module and a csvio module. Generated data will be saved
to disk with number of languages, users, and sentences in the name and a data
and time stamp. the data can then be read in again.
In future the admin could use these data. For the moment the filename to be
read in and saved will be a fixed name determined by a string in const.py

Tue. 16th of February 2016
Got the unittest error free again. Finally. Code coverage is however down to
70%. Got to add more tests and go near 100%

Sun, 5th of March 2016
Removed most of the Generator code. It was a dead end and actually quite
useless. There is no use in saving generated data and later adding it
to the database. Just store it directly in the database. That is what
databases are made for. Now that it seems to work I will put everything
under test and then hopfully can start to do the frontend.

Fr. 12th of August 2016
I do not know why I always get so side tracked. But I decided not to give up
and if it will take another year. The techniques I used are not so bad,
at least I can start off where I left. Code coverage and unit testing are
a cool way to go.

Mo. 15th of August 2016
Further refined the Unique Mixin Class and refactored it out to
its own module. Started testing with pure SQLAlchemy as the class
only touches sql and has nothing to do with Flask. So the class
can be used later on for other purposes. Although I wrote quite
some code, the code coverage didn't move any further. Hopefully
tomorrow there will be some progress.

Wed. 17th of August 2016
Code coverage has now risen to 94%. I finally managed to get
the UniqueMixin class fully tested. I am eager now to get 100%
and start with the frontend. But filling the database will be
a lot of work, so I expect not to be finished before the end
of the week.

Sat. 20th of August 2016
Finally, 100% code coverage of the backend. It was not the best
idea to write the code and to write the unittest afterward. I
had to make huge changes to the code to make it testable.
Some tests were quite challenging for me.
For the future I will be writing the tests first and then write
the code. There is a reason everybody is recommending this.

Sat. 3rd of September 2016
After removing the fake data a lot of changes had to be done. Due
other activities I did not have a lot of time to work on the code
changes. Currently the unitests help to remove all the errors introduced
by moving from fake data to generated data in the database.

